{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","joke","setJoke","punchline","setPunchLine","isloading","setIsLoading","isPunchline","setIsPunchline","isError","setIsError","getRandomJoke","a","fetch","response","json","data","setup","console","log","error","useEffect","className","onClick","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAiFeA,MA/Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGqBJ,oBAAS,GAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIyBN,oBAAS,GAJlC,mBAINO,EAJM,KAIOC,EAJP,OAKiBR,oBAAS,GAL1B,mBAKNS,EALM,KAKGC,EALH,cAcEC,IAdF,2EAcb,8BAAAC,EAAA,6DACEF,GAAW,GACXJ,GAAa,GAFf,SAKM,2FALN,SAMyBO,MADnB,4FALN,cAMQC,EANR,gBAOqBA,EAASC,OAP9B,OAOQC,EAPR,OASId,EAAQc,EAAKC,OACbb,EAAaY,EAAKb,WAClBe,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIhB,GACZG,GAAa,GAbjB,kDAeIY,QAAQE,MAAR,MACAV,GAAW,GAhBf,2DAda,sBAqCb,OAHAW,qBAAU,WACRV,MACC,IAED,sBAAKW,UAAU,YAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,wBAAQC,QAASZ,EAAeW,UAAU,aAA1C,mCAGA,mBACEA,UAAU,cACVE,KAAK,gDACLC,OAAO,QAHT,8BAQF,qBAAKH,UAAU,YACf,uBAAMA,UAAU,OAAhB,UACGb,GACC,mBAAGa,UAAU,aAAb,mDAEDjB,IAAcI,GACb,mBAAGa,UAAU,eAAb,mCAEAjB,GACA,gCACE,qBAAKiB,UAAU,iBAAf,SACE,mBAAGA,UAAU,OAAb,SAAqBrB,MAEvB,qBAAKqB,UAAU,0BAAf,SACE,wBAAQC,QA1DpB,YACsB,IAAhBhB,EACFC,GAAe,IACU,IAAhBD,GACTC,GAAe,IAsDyBc,UAAU,gBAA1C,8BAIF,qBAAKA,UAAU,2BAAf,SACGf,GAAe,mBAAGe,UAAU,YAAb,SAA0BnB,gBC5DzCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92557761.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [joke, setJoke] = useState('');\n  const [punchline, setPunchLine] = useState('');\n  const [isloading, setIsLoading] = useState(false);\n  const [isPunchline, setIsPunchline] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function showPunchline() {\n    if (isPunchline === true) {\n      setIsPunchline(false);\n    } else if (isPunchline === false) {\n      setIsPunchline(true);\n    }\n  }\n  async function getRandomJoke() {\n    setIsError(false);\n    setIsLoading(true);\n    try {\n      let url =\n        'https://thingproxy.freeboard.io/fetch/https://official-joke-api.appspot.com/jokes/random';\n      let response = await fetch(url);\n      let data = await response.json();\n\n      setJoke(data.setup);\n      setPunchLine(data.punchline);\n      console.log(joke);\n      console.log(punchline);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n      setIsError(true);\n    }\n  }\n\n  useEffect(() => {\n    getRandomJoke();\n  }, []);\n  return (\n    <div className='container'>\n      <header className='header'>\n        <button onClick={getRandomJoke} className='header-btn'>\n          Get a New Random Joke\n        </button>\n        <a\n          className='header-link'\n          href='https://github.com/15Dkatz/official_joke_api '\n          target='blank'\n        >\n          View API Docs\n        </a>\n      </header>\n      <div className='divider'></div>\n      <main className='main'>\n        {isError && (\n          <p className='error-text'>There was an error loading your joke.</p>\n        )}\n        {isloading && !isError && (\n          <p className='loading-text'>Loading your joke...</p>\n        )}\n        {!isloading && (\n          <div>\n            <div className='joke-container'>\n              <p className='joke'>{joke}</p>\n            </div>\n            <div className='punchline-btn-container'>\n              <button onClick={showPunchline} className='punchline-btn'>\n                Show Punchline\n              </button>\n            </div>\n            <div className='punchline-text-container'>\n              {isPunchline && <p className='punchline'>{punchline}</p>}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}